<?xml version="1.0" encoding="UTF-8"?>

<entity-mappings
    xmlns="http://java.sun.com/xml/ns/persistence/orm"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://java.sun.com/xml/ns/persistence/orm orm_1_0.xsd"
    version="1.0">

    <!--
    Get the list of countries
    -->
    <named-query name="hp.countries">
        <query>
           select country from Country country
            left join fetch country.regionAliases alias           
            inner join fetch country.regionIndex
            where country.status = com.blueskyminds.homebyfive.framework.core.DomainObjectStatus.Valid
        </query>
    </named-query>

  <!--
    Get a country by its id (ISO 2-digit Country Code)

    Parameters:
      path:  lowercase path to the country eg. /au

    Indexes:
     Rev1: hpCountryByPath
     -->
    <named-query name="hp.country.byPath">
        <query>
           select country from Country country
            left join fetch country.regionAliases alias
            inner join fetch country.regionIndex
             where country.path = :path and
                   country.status = com.blueskyminds.homebyfive.framework.core.DomainObjectStatus.Valid
        </query>
    </named-query>




  <!--
    List states in a country

    Parameters:
      path:  lowercase path to the country eg. /au

    Indexes:
       Rev1: hpStateByParentPath
     -->
    <named-query name="hp.states.byParentPath">
        <query>
           select state from State state
             left join fetch state.regionAliases alias
             inner join fetch state.regionIndex
             where state.parentPath = :path and
                   state.status = com.blueskyminds.homebyfive.framework.core.DomainObjectStatus.Valid
        </query>
    </named-query>

  <!--
    Get a state by its path

    Parameters:
      path:  eg. /au/nsw

    Indexes:
       Rev1: hpStateByPath
     -->
    <named-query name="hp.state.byPath">
        <query>
           select state from State state
             left join fetch state.regionAliases alias
             inner join fetch state.regionIndex
             where state.path = :path and
                   state.status = com.blueskyminds.homebyfive.framework.core.DomainObjectStatus.Valid
        </query>
    </named-query>

     <!--
    List suburbs by the parent path

    Parameters:
      path:  eg. /au/nsw

    Indexes:
       Rev1: hpSuburbByParentPath
     -->
    <named-query name="hp.suburbs.byParentPath">
        <query>
           select suburb from Suburb suburb
             left join fetch suburb.regionAliases alias
             inner join fetch suburb.regionIndex
             where suburb.parentPath = :path and
                   suburb.status = com.blueskyminds.homebyfive.framework.core.DomainObjectStatus.Valid
        </query>
    </named-query>

    <!--
    List suburbs by the postcode path

    Parameters:
      postCode:  eg. /au/nsw/2089

    Indexes:       
     -->
    <named-query name="hp.suburbs.byPostCode">        
        <query>
          select suburb from Suburb suburb
            left join fetch suburb.regionAliases alias
            inner join fetch suburb.regionIndex
            where suburb.postalCodePath = :postCode and
                  suburb.status = com.blueskyminds.homebyfive.framework.core.DomainObjectStatus.Valid
        </query>

    </named-query>

    <!--
    List suburbs by the country path, using a like match on the parent path

    Parameters:
      parentPath:  eg. /au%

    Indexes:
     -->
    <named-query name="hp.suburbs.byCountryPath">
        <query>
           select suburb from Suburb suburb
             left join fetch suburb.regionAliases alias
             inner join fetch suburb.regionIndex
             where suburb.parentPath like :parentPath and
                   suburb.status = com.blueskyminds.homebyfive.framework.core.DomainObjectStatus.Valid
        </query>
    </named-query>

   <!--
    Get a suburb by its path

    Parameters:
      path:  eg. /au/nsw/neutral+bay

    Indexes:
      Rev1: hpSuburbByPath
     -->
    <named-query name="hp.suburb.byPath">
        <query>
           select suburb from Suburb suburb
             left join fetch suburb.regionAliases alias
             inner join fetch suburb.regionIndex
             where suburb.path = :path and
                   suburb.status = com.blueskyminds.homebyfive.framework.core.DomainObjectStatus.Valid
        </query>
    </named-query>

     <!--
    List postcodes by the parent path

    Parameters:
      path:  eg. /au/nsw

    Indexes:
       Rev2: hpPostCodeByParentPath
     -->
    <named-query name="hp.postCodes.byParentPath">
        <query>
          select postCode from PostalCode postCode
            left join fetch postCode.regionAliases alias
            inner join fetch postCode.regionIndex
            where postCode.parentPath = :path and
            postCode.status = com.blueskyminds.homebyfive.framework.core.DomainObjectStatus.Valid
        </query>
    </named-query>

   <!--
    List postalcodes by the country path, using a like match on the parent path

    Parameters:
      parentPath:  eg. /au%

    Indexes:
     -->
    <named-query name="hp.postCodes.byCountryPath">
        <query>
          select postalCode from PostalCode postalCode
            left join fetch postalCode.regionAliases alias
            inner join fetch postalCode.regionIndex
            where postalCode.parentPath like :parentPath and
            postalCode.status = com.blueskyminds.homebyfive.framework.core.DomainObjectStatus.Valid
        </query>
    </named-query>

   <!--
    Get a postCode by its path

    Parameters:
      path:  eg. /au/nsw/2089

    Indexes:
      Rev1: hpPostCodeByPath
     -->
    <named-query name="hp.postCode.byPath">
        <query>
          select postCode from PostalCode postCode
            left join fetch postCode.regionAliases alias
            inner join fetch postCode.regionIndex
            where postCode.path = :path and
            postCode.status = com.blueskyminds.homebyfive.framework.core.DomainObjectStatus.Valid
        </query>
    </named-query>

     <!--
    List streets by the parent path

    Parameters:
      path:  eg. /au/nsw/neutral+bay

    Indexes:

     -->
    <named-query name="hp.streets.byParentPath">
        <query>
          select street from Street street
          left join fetch street.regionAliases alias
          inner join fetch street.regionIndex
          where street.parentPath = :path and
          street.status = com.blueskyminds.homebyfive.framework.core.DomainObjectStatus.Valid
        </query>
    </named-query>

   <!--
    List streets by the country path, using a like match on the parent path

    Parameters:
      parentPath:  eg. /au%

    Indexes:
     -->
    <named-query name="hp.streets.byCountryPath">
        <query>
          select street from Street street
          left join fetch street.regionAliases alias
          inner join fetch street.regionIndex
          where street.parentPath like :parentPath and
          street.status = com.blueskyminds.homebyfive.framework.core.DomainObjectStatus.Valid
        </query>
    </named-query>

   <!--
    Get a street by its path

    Parameters:
      path:  eg. /au/nsw/neutral+bay/spruson+street

    Indexes:

     -->
    <named-query name="hp.street.byPath">
        <query>
           select street from Street street
             left join fetch street.regionAliases alias
             inner join fetch street.regionIndex
             where street.path = :path and
                   street.status = com.blueskyminds.homebyfive.framework.core.DomainObjectStatus.Valid
        </query>
    </named-query>

    <!--
      Get tags for a region

      Parameters:
        path:  lowercase path to the region eg. /au

      Indexes:
       -->
      <named-query name="region.tags.byPath">
          <query>
             select tag from Region region 
              inner join region.tagMaps map
              inner join map.tag tag
              where region.path = :path
          </query>
      </named-query>

   <!--
      Get regions by a tag

      Parameters:
        tagName:  exact tag name

      Indexes:
       -->
      <named-query name="region.byTag">
          <query>
             select region from Region region
              inner join region.tagMaps map
              inner join map.tag tag
              where tag.name = :tagName
          </query>
      </named-query>

    <!--
      Get countries with any of the tags

      Parameters:
        tags:  set of tags
       -->
      <named-query name="country.byTags">
          <query>
            select region from Country region
              left join fetch region.regionAliases alias
              inner join fetch region.regionIndex
              inner join region.tagMaps tagMap where
               region.status = com.blueskyminds.homebyfive.framework.core.DomainObjectStatus.Valid and
               tagMap.tag in (:tags)
          </query>
      </named-query>

  <!--
      Get states with any of the tags

      Parameters:
        tags:  set of tags
       -->
      <named-query name="state.byTags">
          <query>
            select region from State region
              left join fetch region.regionAliases alias
              inner join fetch region.regionIndex
              inner join region.tagMaps tagMap where
               region.status = com.blueskyminds.homebyfive.framework.core.DomainObjectStatus.Valid and
               tagMap.tag in (:tags)
          </query>
      </named-query>

  <!--
      Get postalCodes with any of the tags

      Parameters:
        tags:  set of tags
       -->
      <named-query name="postCode.byTags">
          <query>
            select region from PostalCode region
              left join fetch region.regionAliases alias
              inner join fetch region.regionIndex
              inner join region.tagMaps tagMap where
                region.status = com.blueskyminds.homebyfive.framework.core.DomainObjectStatus.Valid and
                tagMap.tag in (:tags)
          </query>
      </named-query>

  <!--
      Get suburbs with any of the tags

      Parameters:
        tags:  set of tags
       -->
      <named-query name="suburb.byTags">
          <query>
            select region from Suburb region
              left join fetch region.regionAliases alias
              inner join fetch region.regionIndex
              inner join region.tagMaps tagMap where
                region.status = com.blueskyminds.homebyfive.framework.core.DomainObjectStatus.Valid and
                tagMap.tag in (:tags)
          </query>
      </named-query>

  <!--
      Get streets with any of the tags

      Parameters:
        tags:  set of tags
       -->
      <named-query name="street.byTags">
          <query>
            select region from Street region
              left join fetch region.regionAliases alias
              inner join fetch region.regionIndex
              inner join region.tagMaps tagMap where
                region.status = com.blueskyminds.homebyfive.framework.core.DomainObjectStatus.Valid and
                tagMap.tag in (:tags)
          </query>
      </named-query>

   <!--
      Get all states
       -->
      <named-query name="state.all">
          <query>
            select region from State region
              left join fetch region.regionAliases alias
              where region.status = com.blueskyminds.homebyfive.framework.core.DomainObjectStatus.Valid
          </query>
      </named-query>

  <!--
      Get all suburbs
       -->
      <named-query name="suburb.all">
          <query>
            select region from Suburb region
              left join fetch region.regionAliases alias
              inner join fetch region.regionIndex
              where region.status = com.blueskyminds.homebyfive.framework.core.DomainObjectStatus.Valid
          </query>
      </named-query>

  <!--
      Get all postalCodes
       -->
      <named-query name="postCode.all">
          <query>
            select region from PostalCode region
              left join fetch region.regionAliases alias
              inner join fetch region.regionIndex
              where region.status = com.blueskyminds.homebyfive.framework.core.DomainObjectStatus.Valid
          </query>
      </named-query>

  <!--
      Get all streets
       -->
      <named-query name="street.all">
          <query>
            select region from Street region
              left join fetch region.regionAliases alias
              inner join fetch region.regionIndex
              where region.status = com.blueskyminds.homebyfive.framework.core.DomainObjectStatus.Valid
          </query>
      </named-query>

  <!--
      Get states with any of the tags

      Parameters:
        tags:  set of tags
       -->
      <named-query name="state.byParentPathAndTags">
          <query>
            select region from State region
              left join fetch region.regionAliases alias
              inner join fetch region.regionIndex
              inner join region.tagMaps tagMap
              where region.parentPath = :path and
                    region.status = com.blueskyminds.homebyfive.framework.core.DomainObjectStatus.Valid and
                    tagMap.tag in (:tags)
          </query>
      </named-query>

  <!--
      Get postalCodes with any of the tags

      Parameters:
        tags:  set of tags
       -->
      <named-query name="postCode.byParentPathAndTags">
          <query>
            select region from PostalCode region
              left join fetch region.regionAliases alias
              inner join fetch region.regionIndex
              inner join region.tagMaps tagMap
              where region.parentPath = :path and
                    region.status = com.blueskyminds.homebyfive.framework.core.DomainObjectStatus.Valid and
                    tagMap.tag in (:tags)
          </query>
      </named-query>

  <!--
      Get suburbs with any of the tags

      Parameters:
        tags:  set of tags
       -->
      <named-query name="suburb.byParentPathAndTags">
          <query>
            select region from Suburb region
              left join fetch region.regionAliases alias
              inner join fetch region.regionIndex
              inner join region.tagMaps tagMap
              where region.parentPath = :path and
                    region.status = com.blueskyminds.homebyfive.framework.core.DomainObjectStatus.Valid and
                    tagMap.tag in (:tags)
          </query>
      </named-query>

  <!--
      Get streets with any of the tags

      Parameters:
        tags:  set of tags
       -->
      <named-query name="street.byParentPathAndTags">
          <query>
            select region from Street region
              left join fetch region.regionAliases alias
              inner join fetch region.regionIndex
              inner join region.tagMaps tagMap
              where region.parentPath = :path and
                    region.status = com.blueskyminds.homebyfive.framework.core.DomainObjectStatus.Valid and
                    tagMap.tag in (:tags)
          </query>
      </named-query>

   <!--
      Delete a region

      Parameters:
        path:  path to the region eg. /au

      Indexes:
       -->
      <named-query name="region.deleteByPath">
          <query>
             delete Region region where region.path = :path
          </query>
      </named-query>

  <!--
    Get a list of properties in a suburb

    Parameters:
      path:  eg. /au/nsw/neutral+bay

    Indexes:
      Rev1: hpPropertyBySuburbPath
     -->
    <!--<named-query name="hp.properties.bySuburbPath">-->
        <!--<query>-->
           <!--select property from PropertyBean property-->
             <!--where suburbPath = :path-->
        <!--</query>-->
    <!--</named-query>-->

  <!--
    Get a list of properties in a post code

    Parameters:
      path:  eg. /au/nsw/2089

    Indexes:
      Rev1: hpPropertyByPostCodePath
     -->
    <!--<named-query name="hp.properties.byPostCodePath">-->
        <!--<query>-->
           <!--select property from PropertyBean property-->
             <!--where postCodePath = :path-->
        <!--</query>-->
    <!--</named-query>-->

    <!--
    Get a lit of properties contained in a path (starting with path)

    Parameters:
      path:  eg. /au/nsw

    Indexes:
      Rev1: hpPropertyByPath
     -->
    <!--<named-query name="hp.properties.startingWithPath">-->
        <!--<query>-->
           <!--select property from PropertyBean property-->
             <!--where property.path like :path-->
        <!--</query>-->
    <!--</named-query>-->

      <!--
    Get a property by its exact path

    Parameters:
      path:  eg. /au/nsw/neutral+bay/spruson+street/22/1

    Indexes:
      Rev1: hpPropertyByPath
     -->
    <!--<named-query name="hp.property.byPath">-->
        <!--<query>-->
           <!--select property from PropertyBean property-->
             <!--where property.path = :path-->
        <!--</query>-->
    <!--</named-query>-->


     <!--
    Get a property by its premiseId

    Parameters:
      premise:  premise instance

    Indexes:

     -->
    <!--<named-query name="hp.property.byPremise">-->
        <!--<query>-->
           <!--select property from PropertyBean property-->
             <!--where property.premise = :premise-->
        <!--</query>-->
    <!--</named-query>-->

  </entity-mappings>
